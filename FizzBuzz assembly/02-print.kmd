KMD
00000000: EA000002    ;                 B main
00000004:             ; 
00000004: 0000000C    ; width   DEFW 12
00000008: 54 45 53 54 ; test    DEFB "TEST",0
0000000C: 00          ; 
0000000D:             ; 
00000010:             ;                 ALIGN
00000010:             ; main    
00000010:             ; ; You will need to insert any setup code to 
00000010:             ; ; execute before the loop here
00000010: E3A00000    ;                 MOV R0, #0
00000014: E3A01000    ;                 MOV R1, #0      
00000018: E3A02000    ;                 MOV R2, #0      ; Clean registers to avoid software bugs
0000001C: E3A03000    ;                 MOV R3, #0
00000020: E3A04000    ;                 MOV R4, #0
00000024: E3A05000    ;                 MOV R5, #0
00000028: EA000000    ;                 B readChar
0000002C:             ; loop    
0000002C:             ; ;               Print character
0000002C:             ;         
0000002C:             ;                 
0000002C: E51F3030    ;                 LDR R3, width 
00000030:             ; 
00000030:             ; 
00000030:             ; readChar        
00000030:             ; 
00000030: EF000001    ;                 SWI 1           
00000034:             ; 
00000034: E350000A    ;                 CMP R0, #10
00000038: 0B00000A    ;                 BLEQ ReturnKey 
0000003C: E2811001    ;                 ADD R1, R1, #1
00000040:             ; 
00000040: E1510003    ;                 CMP R1, R3
00000044: AB000003    ;                 BLGE newline
00000048: EB000012    ;                 BL print
0000004C:             ; 
0000004C: E3500023    ;                 CMP R0, #'#'
00000050: 1AFFFFF5    ;                 BNE loop
00000054:             ; 
00000054: EF000002    ;                 SWI 2
00000058:             ; 
00000058:             ; newline
00000058:             ; 
00000058: E1A0400E    ;                 MOV R4, LR ; Allows to branch back to main loop without missing pointer to PC
0000005C:             ;                 
0000005C: E3500020    ;                 CMP R0, #32 ; If last char was a space
00000060: 0B000004    ;                 BLEQ Space
00000064:             ; 
00000064: E12FFF14    ;                 BX  R4
00000068:             ;         
00000068:             ; ReturnKey
00000068:             ; 
00000068: E3A01000    ;                 MOV R1, #0
0000006C: E3A0000A    ;                 MOV R0, #10
00000070:             ; 
00000070: EF000000    ;                 SWI 0
00000074:             ; 
00000074: EAFFFFEC    ;                 B loop
00000078:             ; 
00000078:             ; Space
00000078:             ;                 
00000078: E1510003    ;                 CMP R1, R3 ; if last char of width is space, print space
0000007C: E3A00020    ;                 MOV R0, #32
00000080: EF000000    ;                 SWI 0
00000084: E3A0000A    ;                 MOV R0, #10
00000088: EF000000    ;                 SWI 0
0000008C: E3A01000    ;                 MOV R1, #0
00000090: E3A02001    ;                 MOV R2, #1
00000094:             ; 
00000094: E12FFF1E    ;                 BX LR
00000098:             ; 
00000098:             ; 
00000098:             ; print
00000098: E1A0500E    ;                 MOV R5, LR
0000009C: E3520001    ;                 CMP R2, #1
000000A0: 0A000001    ;                 BEQ skip
000000A4:             ; 
000000A4: EF000000    ;                 SWI 0
000000A8: E12FFF15    ;                 BX R5
000000AC:             ; 
000000AC:             ; skip 
000000AC: E3A02000    ;                 MOV r2, #0
000000B0: E12FFF15    ;                 BX R5
000000B4:             ; 
000000B4:             ; 

Symbol Table: Labels
: width                             00000004  Local -- ARM
: test                              00000008  Local -- ARM
: main                              00000010  Local -- ARM
: loop                              0000002C  Local -- ARM
: readChar                          00000030  Local -- ARM
: newline                           00000058  Local -- ARM
: ReturnKey                         00000068  Local -- ARM
: Space                             00000078  Local -- ARM
: print                             00000098  Local -- ARM
: skip                              000000AC  Local -- ARM
