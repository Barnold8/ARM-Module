KMD
00000000: EA00007E    ;                 B main
00000004:             ; 
00000004: 47 65 6E 74 ; msg             DEFB    "Gentleman, ladies, may I have your attention please? Well, you've hear
00000008: 6C 65 6D 61 ; d the backroom boys, "
0000000C: 6E 2C 20 6C ; 
00000010: 61 64 69 65 ; 
00000014: 73 2C 20 6D ; 
00000018: 61 79 20 49 ; 
0000001C: 20 68 61 76 ; 
00000020: 65 20 79 6F ; 
00000024: 75 72 20 61 ; 
00000028: 74 74 65 6E ; 
0000002C: 74 69 6F 6E ; 
00000030: 20 70 6C 65 ; 
00000034: 61 73 65 3F ; 
00000038: 20 57 65 6C ; 
0000003C: 6C 2C 20 79 ; 
00000040: 6F 75 27 76 ; 
00000044: 65 20 68 65 ; 
00000048: 61 72 64 20 ; 
0000004C: 74 68 65 20 ; 
00000050: 62 61 63 6B ; 
00000054: 72 6F 6F 6D ; 
00000058: 20 62 6F 79 ; 
0000005C: 73 2C 20    ; 
0000005F: 6E 6F 77 20 ;                 DEFB    "now it's about time for my turn. C Day, that is Computer Day, will be 
00000063: 69 74 27 73 ; next Monday, July the 16th, "
00000067: 20 61 62 6F ; 
0000006B: 75 74 20 74 ; 
0000006F: 69 6D 65 20 ; 
00000073: 66 6F 72 20 ; 
00000077: 6D 79 20 74 ; 
0000007B: 75 72 6E 2E ; 
0000007F: 20 43 20 44 ; 
00000083: 61 79 2C 20 ; 
00000087: 74 68 61 74 ; 
0000008B: 20 69 73 20 ; 
0000008F: 43 6F 6D 70 ; 
00000093: 75 74 65 72 ; 
00000097: 20 44 61 79 ; 
0000009B: 2C 20 77 69 ; 
0000009F: 6C 6C 20 62 ; 
000000A3: 65 20 6E 65 ; 
000000A7: 78 74 20 4D ; 
000000AB: 6F 6E 64 61 ; 
000000AF: 79 2C 20 4A ; 
000000B3: 75 6C 79 20 ; 
000000B7: 74 68 65 20 ; 
000000BB: 31 36 74 68 ; 
000000BF: 2C 20       ; 
000000C1: 74 68 61 74 ;                 DEFB    "that is in four days time. Now on that date all the computer systems i
000000C5: 20 69 73 20 ; n this country, and subsequently "
000000C9: 69 6E 20 66 ; 
000000CD: 6F 75 72 20 ; 
000000D1: 64 61 79 73 ; 
000000D5: 20 74 69 6D ; 
000000D9: 65 2E 20 4E ; 
000000DD: 6F 77 20 6F ; 
000000E1: 6E 20 74 68 ; 
000000E5: 61 74 20 64 ; 
000000E9: 61 74 65 20 ; 
000000ED: 61 6C 6C 20 ; 
000000F1: 74 68 65 20 ; 
000000F5: 63 6F 6D 70 ; 
000000F9: 75 74 65 72 ; 
000000FD: 20 73 79 73 ; 
00000101: 74 65 6D 73 ; 
00000105: 20 69 6E 20 ; 
00000109: 74 68 69 73 ; 
0000010D: 20 63 6F 75 ; 
00000111: 6E 74 72 79 ; 
00000115: 2C 20 61 6E ; 
00000119: 64 20 73 75 ; 
0000011D: 62 73 65 71 ; 
00000121: 75 65 6E 74 ; 
00000125: 6C 79 20    ; 
00000128: 69 6E 20 74 ;                 DEFB    "in the whole world will come under the control of this central compute
0000012C: 68 65 20 77 ; r which we call WOTAN.",0
00000130: 68 6F 6C 65 ; 
00000134: 20 77 6F 72 ; 
00000138: 6C 64 20 77 ; 
0000013C: 69 6C 6C 20 ; 
00000140: 63 6F 6D 65 ; 
00000144: 20 75 6E 64 ; 
00000148: 65 72 20 74 ; 
0000014C: 68 65 20 63 ; 
00000150: 6F 6E 74 72 ; 
00000154: 6F 6C 20 6F ; 
00000158: 66 20 74 68 ; 
0000015C: 69 73 20 63 ; 
00000160: 65 6E 74 72 ; 
00000164: 61 6C 20 63 ; 
00000168: 6F 6D 70 75 ; 
0000016C: 74 65 72 20 ; 
00000170: 77 68 69 63 ; 
00000174: 68 20 77 65 ; 
00000178: 20 63 61 6C ; 
0000017C: 6C 20 57 4F ; 
00000180: 54 41 4E 2E ; 
00000184: 00          ; 
00000185:             ; 
00000185: 1F 2E 25 2C ; encMsg  DEFB    31,46,37,44,40,51,59,46,61,44,52,37,124,47,37,47,40,57,49,47,124,61,46,57,124,6
00000189: 28 33 3B 2E ; 2,61,47,57,56,124,51,50,124
0000018D: 3D 2C 34 25 ; 
00000191: 7C 2F 25 2F ; 
00000195: 28 39 31 2F ; 
00000199: 7C 3D 2E 39 ; 
0000019D: 7C 3E 3D 2F ; 
000001A1: 39 38 7C 33 ; 
000001A5: 32 7C       ; 
000001A7: 31 3D 28 34 ;                 DEFB    49,61,40,52,57,49,61,40,53,63,61,48,124,44,46,51,62,48,57,49,47,124,47,
000001AB: 39 31 3D 28 ; 51,124,63,51,49,44,48,57,36,124,40
000001AF: 35 3F 3D 30 ; 
000001B3: 7C 2C 2E 33 ; 
000001B7: 3E 30 39 31 ; 
000001BB: 2F 7C 2F 33 ; 
000001BF: 7C 3F 33 31 ; 
000001C3: 2C 30 39 24 ; 
000001C7: 7C 28       ; 
000001C9: 34 39 25 7C ;                 DEFB    52,57,37,124,63,61,50,50,51,40,124,62,57,124,47,51,48,42,57,56,124,43,5
000001CD: 3F 3D 32 32 ; 3,40,52,51,41,40,124,61,124
000001D1: 33 28 7C 3E ; 
000001D5: 39 7C 2F 33 ; 
000001D9: 30 2A 39 38 ; 
000001DD: 7C 2B 35 28 ; 
000001E1: 34 33 29 28 ; 
000001E5: 7C 3D 7C    ; 
000001E8: 37 39 25 72 ;                 DEFB    55,57,37,114,0
000001EC: 00          ; 
000001F0:             ;                 ALIGN
000001F0:             ; 
000001F0: 00000181    ; msgSize DEFW    385
000001F4: 00000067    ; encSize DEFW    103
000001F8: 0000005C    ; encKey  DEFW    92
000001FC: 0000003F    ; msgKey  DEFW    63
00000200:             ;         
00000200:             ; 
00000200:             ; ;REGISTER_CLEAN
00000200:             ; 
00000200:             ; ;               MOV R0, #0
00000200:             ; ;               MOV R1, #0
00000200:             ; ;               MOV R2, #0
00000200:             ; ;               MOV R3, #0
00000200:             ; ;               MOV R4, #0
00000200:             ; ;               MOV R5, #0
00000200:             ; ;               MOV R6, #0
00000200:             ; ;               MOV R7, #0
00000200:             ; ;               MOV R8, #0
00000200:             ; ;               MOV R9, #0
00000200:             ; ;               MOV R10, #0
00000200:             ; 
00000200:             ; ;               BX LR
00000200:             ; 
00000200:             ; 
00000200:             ; main ; G = 71
00000200:             ; 
00000200:             ;                 ;BL REGISTER_CLEAN
00000200:             ;         
00000200: E24F1083    ;                 ADR R1, encMsg
00000204: E51F3018    ;                 LDR R3, encSize
00000208: E51F2018    ;                 LDR R2, encKey
0000020C:             ; 
0000020C:             ;                 ;Print first char lol oops
0000020C: E4910001    ;                 LDR R0, [R1],#1
00000210: E0200002    ;                 EOR R0,R0,R2
00000214: EF000000    ;                 SWI 0
00000218: E2411001    ;                 SUB R1,R1,#1
0000021C:             ;                 ;-----------------------
0000021C: EB000000    ;                 BL crypt
00000220:             ; 
00000220: EF000002    ;                 SWI 2
00000224:             ; 
00000224:             ; 
00000224:             ; 
00000224:             ; crypt
00000224:             ;         ;while msgSize != 0, do thing
00000224:             ; 
00000224:             ;         
00000224: E5510000    ;         LDRB R0, [R1] ; Load current char in R0
00000228:             ; 
00000228:             ;         ;CMP R0, #0
00000228:             ;         ;SWIEQ 2
00000228:             ; 
00000228: E3500000    ;         CMP R0, #0
0000022C: 0A000002    ;         BEQ ignore
00000230: E1500002    ;         CMP R0, R2
00000234: 0A000000    ;         BEQ ignore
00000238:             ; 
00000238: E0200002    ;         EOR R0,R0,R2
0000023C:             ; 
0000023C:             ; ignore
0000023C:             ; 
0000023C: E4C10001    ;         STRB R0, [R1], #1
00000240: E2433001    ;         SUB R3,R3,#1
00000244:             ;         
00000244:             ; 
00000244:             ; 
00000244: EF000000    ;         SWI 0
00000248:             ; 
00000248: E3530000    ;         CMP R3, #0
0000024C: CAFFFFF4    ;         BGT crypt
00000250:             ; 
00000250: E12FFF1E    ;         BX LR
00000254:             ; 
00000254:             ; 
00000254:             ; END
00000254:             ; 
00000254:             ;         ; MOV R0, #10
00000254:             ;         ; ADR R3, msg
00000254:             ;         ; LDR R1, msgSize
00000254:             ;         ; LDR R2, msgKey
00000254:             ;         ; ADD R4,R4, #1
00000254:             ;         ; SUB R1,R1,#1 ; Remove null terminator char
00000254:             ; 
00000254:             ; 
00000254: EF000002    ;         SWI 2
00000258:             ; 
00000258:             ; ;STEVES COMMENTS:
00000258:             ; 
00000258:             ; ; Modify the above to use encMsg, encSize, and encKey to check whether your program decrypts co
                      ; rrectly
00000258:             ; 
00000258:             ; ; Insert the ARM code to call you crypt procedure here
00000258:             ; 
00000258:             ; ; Print out the (en|de)cyrpted message
00000258:             ; 
00000258:             ; ;; R0 <- address of message to encode
00000258:             ; ;; R1 <- size of message in bytes
00000258:             ; ;; R2 <- key (between 0 and 255)
00000258:             ; 
00000258:             ; 
00000258:             ; 
00000258:             ; ;Basis for encryption/decryption 
00000258:             ; 
00000258:             ; 
00000258:             ; ; EOR R0, R5,R2 
00000258:             ; ; SWI 0 
00000258:             ; ; MOV R5, R0
00000258:             ; ; EOR R0, R5,R2 
00000258:             ; ; SWI 0 
00000258:             ; 
00000258:             ; 
00000258:             ; 

Symbol Table: Labels
: msg                               00000004  Local -- ARM
: encMsg                            00000185  Local -- ARM
: msgSize                           000001F0  Local -- ARM
: encSize                           000001F4  Local -- ARM
: encKey                            000001F8  Local -- ARM
: msgKey                            000001FC  Local -- ARM
: main                              00000200  Local -- ARM
: crypt                             00000224  Local -- ARM
: ignore                            0000023C  Local -- ARM
: END                               00000254  Local -- ARM
