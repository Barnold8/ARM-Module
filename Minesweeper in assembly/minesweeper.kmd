KMD
00000000:             ; ; DO NOT MODIFY THIS FILE
00000000:             ; ; BUT FEEL FREE TO STUDY HOW IT WORKS
00000000:             ; ; AND TO USE IT TO TEST YOUR SUBROUTINES
00000000: EA0000AB    ;         B main
00000004:             ; 
00000004:             ; ; Our board 
00000004:             ; ; 0, represents an empty space
00000004:             ; ; 1-8 represents the number of bombs around us
00000004:             ; ; -1 represents there is a bomb at this location
00000004:             ; ; No more than 8 bombs
00000004: 00000000    ; board   DEFW  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
00000008: 00000000    ; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0000000C: 00000000    ;  0, 0, 0, 0, 0
00000010: 00000000    ; 
00000014: 00000000    ; 
00000018: 00000000    ; 
0000001C: 00000000    ; 
00000020: 00000000    ; 
00000024: 00000000    ; 
00000028: 00000000    ; 
0000002C: 00000000    ; 
00000030: 00000000    ; 
00000034: 00000000    ; 
00000038: 00000000    ; 
0000003C: 00000000    ; 
00000040: 00000000    ; 
00000044: 00000000    ; 
00000048: 00000000    ; 
0000004C: 00000000    ; 
00000050: 00000000    ; 
00000054: 00000000    ; 
00000058: 00000000    ; 
0000005C: 00000000    ; 
00000060: 00000000    ; 
00000064: 00000000    ; 
00000068: 00000000    ; 
0000006C: 00000000    ; 
00000070: 00000000    ; 
00000074: 00000000    ; 
00000078: 00000000    ; 
0000007C: 00000000    ; 
00000080: 00000000    ; 
00000084: 00000000    ; 
00000088: 00000000    ; 
0000008C: 00000000    ; 
00000090: 00000000    ; 
00000094: 00000000    ; 
00000098: 00000000    ; 
0000009C: 00000000    ; 
000000A0: 00000000    ; 
000000A4: 00000000    ; 
000000A8: 00000000    ; 
000000AC: 00000000    ; 
000000B0: 00000000    ; 
000000B4: 00000000    ; 
000000B8: 00000000    ; 
000000BC: 00000000    ; 
000000C0: 00000000    ; 
000000C4: 00000000    ; 
000000C8: 00000000    ; 
000000CC: 00000000    ; 
000000D0: 00000000    ; 
000000D4: 00000000    ; 
000000D8: 00000000    ; 
000000DC: 00000000    ; 
000000E0: 00000000    ; 
000000E4: 00000000    ; 
000000E8: 00000000    ; 
000000EC: 00000000    ; 
000000F0: 00000000    ; 
000000F4: 00000000    ; 
000000F8: 00000000    ; 
000000FC: 00000000    ; 
00000100: 00000000    ; 
00000104:             ; boardMask
00000104: FFFFFFFF    ;         DEFW -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-
00000108: FFFFFFFF    ; 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0000010C: FFFFFFFF    ; -1,-1,-1,-1,-1
00000110: FFFFFFFF    ; 
00000114: FFFFFFFF    ; 
00000118: FFFFFFFF    ; 
0000011C: FFFFFFFF    ; 
00000120: FFFFFFFF    ; 
00000124: FFFFFFFF    ; 
00000128: FFFFFFFF    ; 
0000012C: FFFFFFFF    ; 
00000130: FFFFFFFF    ; 
00000134: FFFFFFFF    ; 
00000138: FFFFFFFF    ; 
0000013C: FFFFFFFF    ; 
00000140: FFFFFFFF    ; 
00000144: FFFFFFFF    ; 
00000148: FFFFFFFF    ; 
0000014C: FFFFFFFF    ; 
00000150: FFFFFFFF    ; 
00000154: FFFFFFFF    ; 
00000158: FFFFFFFF    ; 
0000015C: FFFFFFFF    ; 
00000160: FFFFFFFF    ; 
00000164: FFFFFFFF    ; 
00000168: FFFFFFFF    ; 
0000016C: FFFFFFFF    ; 
00000170: FFFFFFFF    ; 
00000174: FFFFFFFF    ; 
00000178: FFFFFFFF    ; 
0000017C: FFFFFFFF    ; 
00000180: FFFFFFFF    ; 
00000184: FFFFFFFF    ; 
00000188: FFFFFFFF    ; 
0000018C: FFFFFFFF    ; 
00000190: FFFFFFFF    ; 
00000194: FFFFFFFF    ; 
00000198: FFFFFFFF    ; 
0000019C: FFFFFFFF    ; 
000001A0: FFFFFFFF    ; 
000001A4: FFFFFFFF    ; 
000001A8: FFFFFFFF    ; 
000001AC: FFFFFFFF    ; 
000001B0: FFFFFFFF    ; 
000001B4: FFFFFFFF    ; 
000001B8: FFFFFFFF    ; 
000001BC: FFFFFFFF    ; 
000001C0: FFFFFFFF    ; 
000001C4: FFFFFFFF    ; 
000001C8: FFFFFFFF    ; 
000001CC: FFFFFFFF    ; 
000001D0: FFFFFFFF    ; 
000001D4: FFFFFFFF    ; 
000001D8: FFFFFFFF    ; 
000001DC: FFFFFFFF    ; 
000001E0: FFFFFFFF    ; 
000001E4: FFFFFFFF    ; 
000001E8: FFFFFFFF    ; 
000001EC: FFFFFFFF    ; 
000001F0: FFFFFFFF    ; 
000001F4: FFFFFFFF    ; 
000001F8: FFFFFFFF    ; 
000001FC: FFFFFFFF    ; 
00000200: FFFFFFFF    ; 
00000204:             ; 
00000204: 45 6E 74 65 ; prompt  DEFB "Enter square to reveal: ",0
00000208: 72 20 73 71 ; 
0000020C: 75 61 72 65 ; 
00000210: 20 74 6F 20 ; 
00000214: 72 65 76 65 ; 
00000218: 61 6C 3A 20 ; 
0000021C: 00          ; 
0000021D: 54 68 61 74 ; already DEFB "That square has already been revealed...\n", 0
00000221: 20 73 71 75 ; 
00000225: 61 72 65 20 ; 
00000229: 68 61 73 20 ; 
0000022D: 61 6C 72 65 ; 
00000231: 61 64 79 20 ; 
00000235: 62 65 65 6E ; 
00000239: 20 72 65 76 ; 
0000023D: 65 61 6C 65 ; 
00000241: 64 2E 2E 2E ; 
00000245: 0A 00       ; 
00000247: 59 6F 75 20 ; loseMsg DEFB "You stepped on a mine, you lose!\n",0
0000024B: 73 74 65 70 ; 
0000024F: 70 65 64 20 ; 
00000253: 6F 6E 20 61 ; 
00000257: 20 6D 69 6E ; 
0000025B: 65 2C 20 79 ; 
0000025F: 6F 75 20 6C ; 
00000263: 6F 73 65 21 ; 
00000267: 0A 00       ; 
00000269: 59 6F 75 20 ; winMsg  DEFB "You successfully uncovered all the squares while avoiding the mines...\n",0
0000026D: 73 75 63 63 ; 
00000271: 65 73 73 66 ; 
00000275: 75 6C 6C 79 ; 
00000279: 20 75 6E 63 ; 
0000027D: 6F 76 65 72 ; 
00000281: 65 64 20 61 ; 
00000285: 6C 6C 20 74 ; 
00000289: 68 65 20 73 ; 
0000028D: 71 75 61 72 ; 
00000291: 65 73 20 77 ; 
00000295: 68 69 6C 65 ; 
00000299: 20 61 76 6F ; 
0000029D: 69 64 69 6E ; 
000002A1: 67 20 74 68 ; 
000002A5: 65 20 6D 69 ; 
000002A9: 6E 65 73 2E ; 
000002AD: 2E 2E 0A 00 ; 
000002B1:             ; 
000002B4:             ;         ALIGN
000002B4: E3A0D801    ; main    MOV R13, #0x10000
000002B8: E24F0FAF    ;         ADR R0, board 
000002BC: E24F1D07    ;         ADR R1, boardMask
000002C0: E3A02000    ;         MOV R2, #0
000002C4: E3E03000    ;         MOV R3, #-1
000002C8: E3A0403F    ;         MOV R4, #63
000002CC: E7802104    ; fl      STR R2, [R0, R4 LSL #2]
000002D0: E7813104    ;         STR R3, [R1, R4 LSL #2]
000002D4: E2444001    ;         SUB R4, R4, #1
000002D8: E3540000    ;         CMP R4, #0
000002DC: AAFFFFFA    ;         BGE fl
000002E0: EB00012C    ;         BL generateBoard
000002E4:             ; 
000002E4: E24F4F7A    ;         ADR R4, boardMask
000002E8: E24F5FBB    ;         ADR R5, board
000002EC: E3A07040    ;         MOV R7, #64
000002F0: EB000023    ; mLoop   BL cls
000002F4: E1A01004    ;         MOV R1, R4
000002F8: E1A00005    ;         MOV R0, R5
000002FC: EB0001E6    ;         BL printMaskedBoard
00000300: E3A0000A    ;         MOV R0, #10
00000304: EF000000    ;         SWI 0
00000308: EF000000    ;         SWI 0
0000030C: E24F0E11    ; reread  ADR R0, prompt
00000310: EB000038    ;         BL boardSquareInput
00000314: E1A01000    ;         MOV R1,R0
00000318: E7940101    ;         LDR R0, [R4, R1 LSL #2]
0000031C:             ; 
0000031C: E3500000    ;         CMP R0, #0
00000320: 1A000005    ;         BNE processSquare
00000324: E3A0000A    ;         MOV R0, #10
00000328: EF000000    ;         SWI 0
0000032C:             ; 
0000032C: E24F0017    ;         ADRL R0, already
00000330: E2400C01    ; 
00000334: EF000003    ;         SWI 3
00000338: EAFFFFF3    ;         B reread
0000033C:             ; processSquare
0000033C: E3A00000    ;         MOV R0,#0
00000340: E7840101    ;         STR R0,[R4, R1 LSL #2]
00000344: E2477001    ;         SUB R7,R7,#1
00000348: E3570008    ;         CMP R7, #8
0000034C: 0A000003    ;         BEQ win
00000350: E7950101    ;         LDR R0, [R5, R1 LSL #2]
00000354: E3700001    ;         CMP R0, #-1
00000358: 0A000003    ;         BEQ lose
0000035C: EAFFFFE3    ;         B mLoop
00000360:             ; 
00000360: E24F00FF    ; win     ADR R0, winMsg
00000364: EF000003    ;         SWI 3
00000368: EF000002    ;         SWI 2
0000036C: E24F002D    ; lose    ADRL R0, loseMsg
00000370: E2400C01    ; 
00000374: EF000003    ;         SWI 3
00000378: EF000002    ;         SWI 2
0000037C:             ; 
0000037C: EF000002    ; exit    SWI 2
00000380: EF000002    ;         SWI 2      
00000384:             ; 
00000384:             ; ;; cls : Clear the screen
00000384: E3A01E32    ; cls     MOV R1,#20*40
00000388: E3A00008    ;         MOV R0,#8
0000038C: EF000000    ; clsLoop SWI 0
00000390: E2511001    ;         SUBS R1,R1,#1
00000394: AAFFFFFC    ;         BGE clsLoop
00000398: E1A0F00E    ;         MOV PC,R14
0000039C:             ; 
0000039C:             ;         ALIGN
0000039C:             ; ; boardSquareInput
0000039C:             ;         include boardSquareInput.s
0000039C: EA00000B    ;         B test_BoardSquareInput
000003A0:             ; 
000003A0: 45 6E 74 65 ; tprompt  DEFB "Enter square to reveal: ",0
000003A4: 72 20 73 71 ; 
000003A8: 75 61 72 65 ; 
000003AC: 20 74 6F 20 ; 
000003B0: 72 65 76 65 ; 
000003B4: 61 6C 3A 20 ; 
000003B8: 00          ; 
000003B9: 59 6F 75 20 ; tmesg    DEFB "You entered the index ",0
000003BD: 65 6E 74 65 ; 
000003C1: 72 65 64 20 ; 
000003C5: 74 68 65 20 ; 
000003C9: 69 6E 64 65 ; 
000003CD: 78 20 00    ; 
000003D0:             ; 
000003D0:             ;     ALIGN
000003D0:             ; test_BoardSquareInput
000003D0: E24F0038    ;         ADR R0, tprompt
000003D4: EB000007    ;         BL boardSquareInput
000003D8:             ; 
000003D8: E1A01000    ;         MOV R1, R0
000003DC: E24F002B    ;         ADR R0, tmesg
000003E0: EF000003    ;         SWI 3
000003E4: E1A00001    ;         MOV R0,R1
000003E8: EF000004    ;         SWI 4
000003EC: E3A0000A    ;         MOV R0,#10
000003F0: EF000000    ;         SWI 0
000003F4: EF000002    ;         SWI 2
000003F8:             ; 
000003F8:             ; 
000003F8:             ; ; boardSquareInput -- read board position from keyboard
000003F8:             ; ; Input:  R0 ---> prompt string address
000003F8:             ; ; Ouptut: R0 <--- index
000003F8:             ; 
000003F8:             ; 
000003F8:             ; 
000003F8:             ; boardSquareInput
000003F8:             ; 
000003F8:             ; 
000003F8: E3A0D801    ;        MOV R13, #0x10000 ; stack base address
000003FC: E92D0010    ;        STMFD R13!, {R4}
00000400: E92D0020    ;        STMFD R13!, {R5}
00000404: E92D0040    ;        STMFD R13!, {R6}
00000408: E3A04000    ;        MOV R4 ,#0
0000040C:             ;     
0000040C:             ; 
0000040C:             ; printPrompt
0000040C:             ; 
0000040C: EF000003    ;        SWI 3
00000410: E1A03000    ;        MOV R3, R0
00000414: EA000003    ;        B takeInput
00000418:             ; 
00000418:             ; printPromptAgain
00000418: E3A04000    ;        MOV R4 ,#0
0000041C: E1A00003    ;        MOV R0, R3
00000420: EF000003    ;        SWI 3
00000424: E1A03000    ;        MOV R3, R0
00000428:             ; 
00000428:             ; takeInput 
00000428:             ; 
00000428: E2844001    ;        ADD R4, R4, #1 ;This is used as a loop counter so i can avoid testing the pushed R4 from
                      ;  the start of the prog as valid data
0000042C: E3A00000    ;        MOV R0, #0
00000430:             ;      
00000430:             ; 
00000430: EF000001    ;        SWI 1
00000434: E1A02000    ;        MOV R2, R0
00000438: E92D0001    ;        STMFD R13!, {R0}
0000043C:             ; 
0000043C: EF000000    ;        SWI 0
00000440: E350000A    ;        CMP R0, #10
00000444: 1AFFFFF7    ;        BNE takeInput  
00000448:             ; 
00000448:             ; process ;10/ENTER seems to be included here so I need to avoid processing that since it isnt ev
                      ; en a valid char to begin with
00000448:             ; 
00000448: E2444001    ;         SUB R4, R4, #1
0000044C:             ;         
0000044C: E8BD0001    ;         LDMFD R13!, {R0}
00000450:             ; 
00000450: E350000A    ;         CMP R0, #10                     ;; need to work a way how to calculate a cell number to
                      ;  return given the numbers input by the user
00000454: 0A000009    ;         BEQ IGN_CHAR
00000458:             ; 
00000458: E350002C    ;         CMP R0, #','
0000045C: 0A000007    ;         BEQ IGN_CHAR
00000460:             ; 
00000460: E3500038    ;         CMP R0, #'8'
00000464: CAFFFFEB    ;         BGT printPromptAgain
00000468:             ; 
00000468: E3500031    ;         CMP R0, #'1'
0000046C: BAFFFFE9    ;         BLT printPromptAgain
00000470:             ; 
00000470: E3540000    ;         CMP R4, #0
00000474: 01A05000    ;         MOVEQ R5, R0
00000478:             ; 
00000478: E3540002    ;         CMP R4, #2
0000047C: 01A06000    ;         MOVEQ R6, R0
00000480:             ; 
00000480:             ; IGN_CHAR
00000480:             ; 
00000480: E3540000    ;         CMP R4, #0
00000484: CAFFFFEF    ;         BGT process
00000488:             ; 
00000488:             ; 
00000488:             ; endProcess
00000488:             ; 
00000488:             ;        ;ADR R0, wmesg
00000488:             ;        ;SWI 3
00000488:             ; 
00000488:             ; 
00000488: E2455030    ;        SUB R5,R5, #48   ;Convert ascii chars to their actual decimal representative 
0000048C: E2466030    ;        SUB R6,R6, #48
00000490:             ; 
00000490:             ;                         ;My own formula I made (8xC - (8-R))
00000490: E3A00008    ;        MOV R0, #8
00000494: E0010095    ;        MUL R1, R5, R0
00000498: E1A02000    ;        MOV R2, R0
0000049C: E0422006    ;        SUB R2, R2, R6
000004A0: E0411002    ;        SUB R1, R1, R2
000004A4: E2411001    ;        SUB R1, R1, #1 ; this was needed for some reason
000004A8:             ; 
000004A8:             ;        ;ADR R0, dmesg
000004A8:             ;        ;SWI 3
000004A8:             ; 
000004A8:             ; 
000004A8: E1A00001    ;        MOV R0, R1
000004AC:             ; 
000004AC: E8BD0010    ;        LDMFD R13!,{R4}
000004B0: E8BD0020    ;        LDMFD R13!,{R5}
000004B4: E8BD0040    ;        LDMFD R13!,{R6}
000004B8:             ; 
000004B8:             ;       
000004B8: E12FFF1E    ;        BX LR
000004BC:             ; 
000004BC:             ; 
000004BC:             ; 
000004BC:             ; ; Test subroutines to run when a certain test is met within code
000004BC:             ; TEST
000004BC:             ; 
000004BC: E3A0004D    ;         MOV R0, #77
000004C0: EF000000    ;         SWI 0
000004C4: EF000000    ;         SWI 0
000004C8: EF000000    ;         SWI 0
000004CC: EF000000    ;         SWI 0
000004D0: EF000000    ;         SWI 0
000004D4: EF000000    ;         SWI 0
000004D8: EF000000    ;         SWI 0
000004DC:             ; 
000004DC: E8BD0010    ;         LDMFD R13!,{R4}
000004E0: E8BD0020    ;         LDMFD R13!,{R5}
000004E4: E8BD0040    ;         LDMFD R13!,{R6}
000004E8: EAFFFFCA    ;         B printPromptAgain
000004EC:             ; 
000004EC:             ; OUTBOUNDTESTA
000004EC:             ; 
000004EC: E3A00058    ;         MOV R0, #88
000004F0: EF000000    ;         SWI 0
000004F4: EF000000    ;         SWI 0
000004F8: EF000000    ;         SWI 0
000004FC: EF000000    ;         SWI 0
00000500: EF000000    ;         SWI 0
00000504: EF000000    ;         SWI 0
00000508: EF000000    ;         SWI 0
0000050C:             ; 
0000050C: E8BD0010    ;         LDMFD R13!,{R4}
00000510: E8BD0020    ;        LDMFD R13!,{R5}
00000514: E8BD0040    ;        LDMFD R13!,{R6}
00000518: EF000002    ;         SWI 2
0000051C:             ; 
0000051C:             ; OUTBOUNDTESTB
0000051C:             ; 
0000051C: E3A00063    ;         MOV R0, #99
00000520: EF000000    ;         SWI 0
00000524: EF000000    ;         SWI 0
00000528: EF000000    ;         SWI 0
0000052C: EF000000    ;         SWI 0
00000530: EF000000    ;         SWI 0
00000534: EF000000    ;         SWI 0
00000538: EF000000    ;         SWI 0
0000053C:             ; 
0000053C:             ; 
0000053C: E3A0000A    ;         MOV R0,#10
00000540: EF000000    ;         SWI 0 
00000544: EF000000    ;         SWI 0
00000548:             ; 
00000548: E3A00039    ;         MOV R0, #'9'
0000054C: EF000004    ;         SWI 4
00000550:             ; 
00000550:             ; 
00000550: E3A0000A    ;         MOV R0,#10
00000554: EF000000    ;         SWI 0 
00000558: EF000000    ;         SWI 0
0000055C:             ; 
0000055C: E3A00030    ;         MOV R0, #'0'
00000560: EF000004    ;         SWI 4
00000564:             ; 
00000564: E8BD0010    ;         LDMFD R13!,{R4}
00000568: E8BD0020    ;        LDMFD R13!,{R5}
0000056C: E8BD0040    ;        LDMFD R13!,{R6}
00000570: EF000002    ;         SWI 2
00000574:             ; 
00000574:             ; 
00000574:             ;         ALIGN
00000574: EF000002    ;         SWI 2
00000578:             ; 
00000578:             ; ;        ALIGN
00000578:             ; ; printMaskedBoard
00000578:             ; ;        include printMaskedBoard.s
00000578:             ; ;        ALIGN
00000578:             ; ;        SWI 2
00000578:             ; 
00000578:             ;         ALIGN
00000578:             ; ; generateBoard -- which includes printMaskedBoard
00000578:             ;         include generateBoard.s
00000578: EA00007F    ;         B test_generateBoard
0000057C:             ; 
0000057C:             ; 
0000057C:             ; ; Our board 
0000057C:             ; ; 0, represents an empty space
0000057C:             ; ; 1-8 represents the number of bombs around us
0000057C:             ; ; 66 represents there is a bomb at this location
0000057C:             ; ; No more than 8 bombs
0000057C:             ; testGenboard   
0000057C: 00000000    ;         DEFW  0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
00000580: 00000000    ; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
00000584: 00000000    ;  0, 0, 0, 0, 0
00000588: 00000003    ; 
0000058C: 00000000    ; 
00000590: 00000000    ; 
00000594: 00000000    ; 
00000598: 00000000    ; 
0000059C: 00000004    ; 
000005A0: 00000000    ; 
000005A4: 00000000    ; 
000005A8: 00000000    ; 
000005AC: 00000000    ; 
000005B0: 00000000    ; 
000005B4: 00000001    ; 
000005B8: 00000000    ; 
000005BC: 00000000    ; 
000005C0: 00000000    ; 
000005C4: 00000000    ; 
000005C8: 00000000    ; 
000005CC: 00000000    ; 
000005D0: 00000000    ; 
000005D4: 00000000    ; 
000005D8: 00000000    ; 
000005DC: 00000000    ; 
000005E0: 00000000    ; 
000005E4: 00000000    ; 
000005E8: 00000000    ; 
000005EC: 00000000    ; 
000005F0: 00000000    ; 
000005F4: 00000000    ; 
000005F8: 00000000    ; 
000005FC: 00000000    ; 
00000600: 00000000    ; 
00000604: 00000000    ; 
00000608: 00000000    ; 
0000060C: 00000000    ; 
00000610: 00000000    ; 
00000614: 00000000    ; 
00000618: 00000000    ; 
0000061C: 00000000    ; 
00000620: 00000000    ; 
00000624: 00000000    ; 
00000628: 00000000    ; 
0000062C: 00000000    ; 
00000630: 00000000    ; 
00000634: 00000000    ; 
00000638: 00000000    ; 
0000063C: 00000000    ; 
00000640: 00000000    ; 
00000644: 00000000    ; 
00000648: 00000000    ; 
0000064C: 00000000    ; 
00000650: 00000000    ; 
00000654: 00000000    ; 
00000658: 00000000    ; 
0000065C: 00000000    ; 
00000660: 00000000    ; 
00000664: 00000000    ; 
00000668: 00000000    ; 
0000066C: 00000000    ; 
00000670: 00000000    ; 
00000674: 00000000    ; 
00000678: 00000000    ; 
0000067C:             ; tgbBoardMask
0000067C: 00000000    ;         DEFW  0,0,0,0,0, 0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0, 0,0,0,0, 0, 0,0,0,0,0,0,0,0,0,0, 0, 0
00000680: 00000000    ; ,0,0,0,0, 0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0, 0,0,0,0, 0, 0,0,0
00000684: 00000000    ; 
00000688: 00000000    ; 
0000068C: 00000000    ; 
00000690: 00000000    ; 
00000694: 00000000    ; 
00000698: 00000000    ; 
0000069C: 00000000    ; 
000006A0: 00000000    ; 
000006A4: 00000000    ; 
000006A8: 00000000    ; 
000006AC: 00000000    ; 
000006B0: 00000000    ; 
000006B4: 00000000    ; 
000006B8: 00000000    ; 
000006BC: 00000000    ; 
000006C0: 00000000    ; 
000006C4: 00000000    ; 
000006C8: 00000000    ; 
000006CC: 00000000    ; 
000006D0: 00000000    ; 
000006D4: 00000000    ; 
000006D8: 00000000    ; 
000006DC: 00000000    ; 
000006E0: 00000000    ; 
000006E4: 00000000    ; 
000006E8: 00000000    ; 
000006EC: 00000000    ; 
000006F0: 00000000    ; 
000006F4: 00000000    ; 
000006F8: 00000000    ; 
000006FC: 00000000    ; 
00000700: 00000000    ; 
00000704: 00000000    ; 
00000708: 00000000    ; 
0000070C: 00000000    ; 
00000710: 00000000    ; 
00000714: 00000000    ; 
00000718: 00000000    ; 
0000071C: 00000000    ; 
00000720: 00000000    ; 
00000724: 00000000    ; 
00000728: 00000000    ; 
0000072C: 00000000    ; 
00000730: 00000000    ; 
00000734: 00000000    ; 
00000738: 00000000    ; 
0000073C: 00000000    ; 
00000740: 00000000    ; 
00000744: 00000000    ; 
00000748: 00000000    ; 
0000074C: 00000000    ; 
00000750: 00000000    ; 
00000754: 00000000    ; 
00000758: 00000000    ; 
0000075C: 00000000    ; 
00000760: 00000000    ; 
00000764: 00000000    ; 
00000768: 00000000    ; 
0000076C: 00000000    ; 
00000770: 00000000    ; 
00000774: 00000000    ; 
00000778: 00000000    ; 
0000077C:             ; 
0000077C:             ;         ALIGN
0000077C:             ; test_generateBoard
0000077C: E3A0D801    ;         MOV R13, #0x10000
00000780: E24F0F83    ;         ADR R0, testGenboard 
00000784: EB000003    ;         BL generateBoard
00000788:             ; 
00000788: E24F0F85    ;         ADR R0, testGenboard 
0000078C: E24F1F46    ;         ADR R1, tgbBoardMask
00000790: EB0000C1    ;         BL printMaskedBoard
00000794: EF000002    ;         SWI 2
00000798:             ; 
00000798:             ; 
00000798:             ; ; generateBoard
00000798:             ; ; Input R0 -- array to generate board in
00000798:             ; generateBoard
00000798:             ; ; Insert your implementation here
00000798:             ; ; Delete this code between [snip] and insert your implementation here
00000798:             ; ; --[snip]--
00000798:             ; 
00000798:             ; 
00000798: E3A01000    ;         MOV R1,#0
0000079C: E3A02000    ;         MOV R2,#0
000007A0:             ; gb_Clear
000007A0: E7802101    ;         STR R2,[R0, R1 LSL #2]
000007A4: E2811001    ;         ADD R1,R1, #1
000007A8: E3510040    ;         CMP R1,#64
000007AC: BAFFFFFB    ;         BLT gb_Clear
000007B0:             ; 
000007B0: E3A02001    ;         MOV R2, #1
000007B4: E3E03000    ;         MOV R3, #-1
000007B8: E5002000    ;         STR R2, [R0]
000007BC: E5803004    ;         STR R3, [R0, #4]
000007C0: E5802008    ;         STR R2, [R0, #8]
000007C4: E5802014    ;         STR R2, [R0, #20]
000007C8: E5803018    ;         STR R3, [R0, #24]
000007CC: E580301C    ;         STR R3, [R0, #28]
000007D0:             ; 
000007D0: E5802020    ;         STR R2, [R0, #32]
000007D4: E5802024    ;         STR R2, [R0, #36]
000007D8: E5802028    ;         STR R2, [R0, #40]
000007DC: E5802034    ;         STR R2, [R0, #52]
000007E0: E580303C    ;         STR R3, [R0, #60]
000007E4:             ; 
000007E4: E5802058    ;         STR R2, [R0, #88]
000007E8: E580205C    ;         STR R2, [R0, #92]
000007EC: E5802060    ;         STR R2, [R0, #96]
000007F0:             ; 
000007F0: E5802064    ;         STR R2, [R0, #100]
000007F4: E5802068    ;         STR R2, [R0, #104]
000007F8:             ; 
000007F8: E5802080    ;         STR R2, [R0, #128]
000007FC: E5803084    ;         STR R3, [R0, #132]
00000800: E5802088    ;         STR R2, [R0, #136]
00000804: E580208C    ;         STR R2, [R0, #140]
00000808: E5802090    ;         STR R2, [R0, #144]
0000080C: E5802094    ;         STR R2, [R0, #148]
00000810:             ; 
00000810: E58020A0    ;         STR R2, [R0, #160]
00000814: E58020A4    ;         STR R2, [R0, #164]
00000818: E58020A8    ;         STR R2, [R0, #168]
0000081C: E58020AC    ;         STR R2, [R0, #172]
00000820: E58030B0    ;         STR R3, [R0, #176]
00000824: E58020B4    ;         STR R2, [R0, #180]
00000828:             ; 
00000828: E58020C0    ;         STR R2, [R0, #192]
0000082C: E58020C4    ;         STR R2, [R0, #196]
00000830: E58020D4    ;         STR R2, [R0, #212]
00000834:             ; 
00000834: E58020E0    ;         STR R2, [R0, #224]
00000838: E58030E4    ;         STR R3, [R0, #228]
0000083C: E58030EC    ;         STR R3, [R0, #236]
00000840: E58020F0    ;         STR R2, [R0, #240]
00000844:             ; 
00000844: E3A02002    ;         MOV R2, #2
00000848: E58020C8    ;         STR R2, [R0, #200]
0000084C: E58020CC    ;         STR R2, [R0, #204]
00000850: E58020D0    ;         STR R2, [R0, #208]
00000854: E58020E8    ;         STR R2, [R0, #232]
00000858:             ; 
00000858: E3A02003    ;         MOV R2, #3
0000085C: E5802038    ;         STR R2, [R0, #56]
00000860:             ; 
00000860: E1A0F00E    ;         MOV PC, R14
00000864:             ; ;--[snip]--
00000864:             ; 
00000864:             ; ; DO NOT CHANGE ANYTHING AFTER THIS POINT...
00000864:             ; ; randu -- Generates a random number
00000864:             ; ; Input: None
00000864:             ; ; Ouptut: R0 -> Random number
00000864: E59F2018    ; randu   LDR R2,mult
00000868: E3E01102    ;         MVN R1,#0x80000000
0000086C: E59F000C    ;         LDR R0,seed
00000870: E0000092    ;         MUL R0,R2,R0
00000874: E0000001    ;         AND R0,R0,R1
00000878: E58F0000    ;         STR R0,seed
0000087C: E1A0F00E    ;         MOV PC, R14
00000880:             ; 
00000880:             ;         ALIGN
00000880: 00C0FFEE    ; seed    DEFW    0xC0FFEE
00000884: 00010003    ; mult    DEFW    65539
00000888:             ; 
00000888:             ;         ALIGN
00000888:             ;         include printMaskedBoard.s
00000888: EA00007F    ;             B test_printMaskedBoard
0000088C:             ; ;https://developer.arm.com/documentation/dui0068/b/Writing-ARM-and-Thumb-Assembly-Language/Load
                      ; -and-store-multiple-register-instructions/Implementing-stacks-with-LDM-and-STM
0000088C:             ; ; Our board 
0000088C:             ; ; 0, represents an empty space
0000088C:             ; ; 1-8 represents the number of bombs around us
0000088C:             ; ; -1 represents there is a bomb at this location
0000088C:             ; ; No more than 8 bombs
0000088C:             ; pmbBoard
0000088C: 00000001    ;         DEFW  1,-1, 1, 0, 0, 1,-1,-1, 1, 1, 1, 0, 0, 1, 3,-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
00000890: FFFFFFFF    ; 0, 0, 0, 0, 0, 1,-1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1,-1, 1, 0, 0, 1, 1, 2, 2, 2, 1, 0, 0, 1,-1, 2,
00000894: 00000001    ; -1, 1, 0, 0, 0
00000898: 00000000    ; 
0000089C: 00000000    ; 
000008A0: 00000001    ; 
000008A4: FFFFFFFF    ; 
000008A8: FFFFFFFF    ; 
000008AC: 00000001    ; 
000008B0: 00000001    ; 
000008B4: 00000001    ; 
000008B8: 00000000    ; 
000008BC: 00000000    ; 
000008C0: 00000001    ; 
000008C4: 00000003    ; 
000008C8: FFFFFFFF    ; 
000008CC: 00000000    ; 
000008D0: 00000000    ; 
000008D4: 00000000    ; 
000008D8: 00000000    ; 
000008DC: 00000000    ; 
000008E0: 00000000    ; 
000008E4: 00000001    ; 
000008E8: 00000001    ; 
000008EC: 00000001    ; 
000008F0: 00000001    ; 
000008F4: 00000001    ; 
000008F8: 00000000    ; 
000008FC: 00000000    ; 
00000900: 00000000    ; 
00000904: 00000000    ; 
00000908: 00000000    ; 
0000090C: 00000001    ; 
00000910: FFFFFFFF    ; 
00000914: 00000001    ; 
00000918: 00000001    ; 
0000091C: 00000001    ; 
00000920: 00000001    ; 
00000924: 00000000    ; 
00000928: 00000000    ; 
0000092C: 00000001    ; 
00000930: 00000001    ; 
00000934: 00000001    ; 
00000938: 00000001    ; 
0000093C: FFFFFFFF    ; 
00000940: 00000001    ; 
00000944: 00000000    ; 
00000948: 00000000    ; 
0000094C: 00000001    ; 
00000950: 00000001    ; 
00000954: 00000002    ; 
00000958: 00000002    ; 
0000095C: 00000002    ; 
00000960: 00000001    ; 
00000964: 00000000    ; 
00000968: 00000000    ; 
0000096C: 00000001    ; 
00000970: FFFFFFFF    ; 
00000974: 00000002    ; 
00000978: FFFFFFFF    ; 
0000097C: 00000001    ; 
00000980: 00000000    ; 
00000984: 00000000    ; 
00000988: 00000000    ; 
0000098C:             ; pmbBoardMask
0000098C: 00000000    ;         DEFW  0,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1, 0,-1,-1,-1, 0, 0,-1,-
00000990: FFFFFFFF    ; 1,-1,-1,-1,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1, 0,-1,-1,
00000994: FFFFFFFF    ; -1, 0, 0,-1,-1
00000998: FFFFFFFF    ; 
0000099C: FFFFFFFF    ; 
000009A0: 00000000    ; 
000009A4: FFFFFFFF    ; 
000009A8: 00000000    ; 
000009AC: FFFFFFFF    ; 
000009B0: FFFFFFFF    ; 
000009B4: FFFFFFFF    ; 
000009B8: FFFFFFFF    ; 
000009BC: FFFFFFFF    ; 
000009C0: FFFFFFFF    ; 
000009C4: 00000000    ; 
000009C8: FFFFFFFF    ; 
000009CC: FFFFFFFF    ; 
000009D0: FFFFFFFF    ; 
000009D4: FFFFFFFF    ; 
000009D8: FFFFFFFF    ; 
000009DC: 00000000    ; 
000009E0: FFFFFFFF    ; 
000009E4: FFFFFFFF    ; 
000009E8: FFFFFFFF    ; 
000009EC: 00000000    ; 
000009F0: 00000000    ; 
000009F4: FFFFFFFF    ; 
000009F8: FFFFFFFF    ; 
000009FC: FFFFFFFF    ; 
00000A00: FFFFFFFF    ; 
00000A04: FFFFFFFF    ; 
00000A08: FFFFFFFF    ; 
00000A0C: FFFFFFFF    ; 
00000A10: FFFFFFFF    ; 
00000A14: FFFFFFFF    ; 
00000A18: 00000000    ; 
00000A1C: 00000000    ; 
00000A20: FFFFFFFF    ; 
00000A24: FFFFFFFF    ; 
00000A28: FFFFFFFF    ; 
00000A2C: FFFFFFFF    ; 
00000A30: 00000000    ; 
00000A34: FFFFFFFF    ; 
00000A38: 00000000    ; 
00000A3C: FFFFFFFF    ; 
00000A40: FFFFFFFF    ; 
00000A44: FFFFFFFF    ; 
00000A48: FFFFFFFF    ; 
00000A4C: FFFFFFFF    ; 
00000A50: FFFFFFFF    ; 
00000A54: 00000000    ; 
00000A58: FFFFFFFF    ; 
00000A5C: FFFFFFFF    ; 
00000A60: FFFFFFFF    ; 
00000A64: FFFFFFFF    ; 
00000A68: FFFFFFFF    ; 
00000A6C: 00000000    ; 
00000A70: FFFFFFFF    ; 
00000A74: FFFFFFFF    ; 
00000A78: FFFFFFFF    ; 
00000A7C: 00000000    ; 
00000A80: 00000000    ; 
00000A84: FFFFFFFF    ; 
00000A88: FFFFFFFF    ; 
00000A8C:             ; 
00000A8C:             ;         ALIGN
00000A8C:             ; 
00000A8C:             ; ; printMaskedBoard -- print the board with only the squares visible when boardMask contains zer
                      ; o
00000A8C:             ; ; Input: R0 <-- Address of board
00000A8C:             ; ;        R1 <-- Address of board Mask
00000A8C:             ; 
00000A8C:             ; 
00000A8C:             ; test_printMaskedBoard
00000A8C: E24F0F82    ;         ADR R0, pmbBoard 
00000A90: E24F1F43    ;         ADR R1, pmbBoardMask
00000A94: EB000000    ;         BL printMaskedBoard
00000A98: EF000002    ;         SWI 2
00000A9C:             ; 
00000A9C:             ; 
00000A9C:             ; ; printBoard -- print the board 
00000A9C:             ; ; Input: R0 <-- Address of board
00000A9C:             ; printMaskedBoard   
00000A9C:             ; ; Insert your implementation here
00000A9C:             ; 
00000A9C: E3A0D801    ; MOV R13, #0x10000 ; stack base address
00000AA0:             ; 
00000AA0: E92D0010    ; STMFD R13!, {R4}
00000AA4: E92D0020    ; STMFD R13!, {R5}
00000AA8:             ; 
00000AA8: E1A04000    ; MOV R4, R0
00000AAC: E1A05001    ; MOV R5, R1
00000AB0:             ; 
00000AB0: E3A00020    ; MOV R0, #32
00000AB4:             ; 
00000AB4: EF000000    ; SWI 0
00000AB8: EF000000    ; SWI 0
00000ABC: EF000000    ; SWI 0
00000AC0: E3A03000    ; MOV R3, #0
00000AC4:             ; 
00000AC4: E3A01001    ; MOV R1, #1
00000AC8:             ; 
00000AC8:             ; topRow
00000AC8:             ; 
00000AC8: E3A00020    ;         MOV R0, #32
00000ACC: EF000000    ;         SWI 0
00000AD0: EF000000    ;         SWI 0
00000AD4:             ; 
00000AD4: E1A00001    ;         MOV R0, R1
00000AD8: EF000004    ;         SWI 4
00000ADC:             ;         
00000ADC: E3A00020    ;         MOV R0, #32
00000AE0: EF000000    ;         SWI 0
00000AE4: EF000000    ;         SWI 0
00000AE8:             ; 
00000AE8: E2811001    ;         ADD R1, R1, #1
00000AEC:             ; 
00000AEC: E3510009    ;         CMP R1,#9
00000AF0: 1AFFFFF4    ;         BNE topRow
00000AF4: E3A01001    ;         MOV R1, #1 ; reset R0 after its use
00000AF8:             ; 
00000AF8:             ; RowAdd
00000AF8:             ;       
00000AF8: E3A0000A    ;         MOV R0, #10
00000AFC: EF000000    ;         SWI 0
00000B00: EF000000    ;         SWI 0
00000B04:             ; 
00000B04: E1A00001    ;         MOV R0, R1
00000B08: EF000004    ;         SWI 4
00000B0C: E3A00020    ;         MOV R0, #32
00000B10: EF000000    ;         SWI 0
00000B14: EF000000    ;         SWI 0  
00000B18:             ; 
00000B18:             ; PrintTableRow ; sub-sub routine within RowAdd | ;0 = show value | !0 = show | R2 is used for ad
                      ; dressing tables
00000B18:             ; 
00000B18: E3A00020    ;         MOV R0, #32
00000B1C: EF000000    ;         SWI 0
00000B20: EF000000    ;         SWI 0
00000B24:             ; 
00000B24: E7950003    ;         LDR R0, [R5,R3] ; THIS SHOULD BE THE MASKED BOARD ARRAY
00000B28: E3500000    ;         CMP R0, #0
00000B2C: 0A000002    ;         BEQ PRINTVALUE
00000B30:             ; 
00000B30:             ; 
00000B30: E3A00023    ;         MOV R0, #35
00000B34: EF000000    ;         SWI 0
00000B38: EA000008    ;         B Skip
00000B3C:             ; 
00000B3C:             ; 
00000B3C:             ; 
00000B3C:             ; 
00000B3C:             ; PRINTVALUE      ; THIS NEEDS TO BE LOOKED AT 
00000B3C:             ;         
00000B3C:             ; 
00000B3C:             ;         
00000B3C: E7940003    ;         LDR R0, [R4,R3]
00000B40:             ;         
00000B40: E3500000    ;         CMP R0, #0
00000B44: 03A00020    ;         MOVEQ R0 , #32 
00000B48: 0F000000    ;         SWIEQ 0
00000B4C:             ; 
00000B4C: E3700001    ;         CMP R0, #-1
00000B50: 03A0004D    ;         MOVEQ R0 , #77
00000B54: 0F000000    ;         SWIEQ 0
00000B58:             ; 
00000B58: E3500020    ;         CMP R0, #32
00000B5C: BF000004    ;         SWILT 4
00000B60:             ; 
00000B60:             ;   
00000B60:             ; 
00000B60:             ; 
00000B60:             ; 
00000B60:             ; Skip
00000B60:             ; 
00000B60: E3A00020    ;         MOV R0, #32
00000B64: EF000000    ;         SWI 0
00000B68: EF000000    ;         SWI 0
00000B6C:             ; 
00000B6C: E2833004    ;         ADD R3, R3, #4
00000B70:             ; 
00000B70: E203001F    ;         AND R0, R3, #31
00000B74: E3500000    ;         CMP R0, #0
00000B78:             ;         
00000B78: 1AFFFFE6    ;         BNE PrintTableRow
00000B7C:             ; 
00000B7C:             ; 
00000B7C:             ; RowAdd_pt_two ; end section of row add
00000B7C:             ;         
00000B7C:             ; 
00000B7C:             ; 
00000B7C:             ;         
00000B7C:             ; 
00000B7C: E3510008    ;         CMP R1,#8
00000B80: E2811001    ;         ADD R1,R1,#1
00000B84: 1AFFFFDB    ;         BNE RowAdd
00000B88:             ;         
00000B88: E8BD0020    ;         LDMFD R13!, {R5}
00000B8C: E8BD0010    ;         LDMFD R13!, {R4}
00000B90:             ; 
00000B90: E12FFF1E    ;         BX LR
00000B94:             ; 
00000B94:             ;    
00000B94:             ; 
00000B94:             ;         ALIGN
00000B94: EF000002    ;         SWI 2
00000B98:             ; 
00000B98:             ;         ALIGN
00000B98: EF000002    ;         SWI 2

Symbol Table: Labels
: board                             00000004  Local -- ARM
: boardMask                         00000104  Local -- ARM
: prompt                            00000204  Local -- ARM
: already                           0000021D  Local -- ARM
: loseMsg                           00000247  Local -- ARM
: winMsg                            00000269  Local -- ARM
: main                              000002B4  Local -- ARM
: fl                                000002CC  Local -- ARM
: mLoop                             000002F0  Local -- ARM
: reread                            0000030C  Local -- ARM
: processSquare                     0000033C  Local -- ARM
: win                               00000360  Local -- ARM
: lose                              0000036C  Local -- ARM
: exit                              0000037C  Local -- ARM
: cls                               00000384  Local -- ARM
: clsLoop                           0000038C  Local -- ARM
: tprompt                           000003A0  Local -- ARM
: tmesg                             000003B9  Local -- ARM
: test_BoardSquareInput             000003D0  Local -- ARM
: boardSquareInput                  000003F8  Local -- ARM
: printPrompt                       0000040C  Local -- ARM
: printPromptAgain                  00000418  Local -- ARM
: takeInput                         00000428  Local -- ARM
: process                           00000448  Local -- ARM
: IGN_CHAR                          00000480  Local -- ARM
: endProcess                        00000488  Local -- ARM
: TEST                              000004BC  Local -- ARM
: OUTBOUNDTESTA                     000004EC  Local -- ARM
: OUTBOUNDTESTB                     0000051C  Local -- ARM
: testGenboard                      0000057C  Local -- ARM
: tgbBoardMask                      0000067C  Local -- ARM
: test_generateBoard                0000077C  Local -- ARM
: generateBoard                     00000798  Local -- ARM
: gb_Clear                          000007A0  Local -- ARM
: randu                             00000864  Local -- ARM
: seed                              00000880  Local -- ARM
: mult                              00000884  Local -- ARM
: pmbBoard                          0000088C  Local -- ARM
: pmbBoardMask                      0000098C  Local -- ARM
: test_printMaskedBoard             00000A8C  Local -- ARM
: printMaskedBoard                  00000A9C  Local -- ARM
: topRow                            00000AC8  Local -- ARM
: RowAdd                            00000AF8  Local -- ARM
: PrintTableRow                     00000B18  Local -- ARM
: PRINTVALUE                        00000B3C  Local -- ARM
: Skip                              00000B60  Local -- ARM
: RowAdd_pt_two                     00000B7C  Local -- ARM
