KMD
00000000: EA00000B    ;         B test_BoardSquareInput
00000004:             ; 
00000004: 45 6E 74 65 ; tprompt  DEFB "Enter square to reveal: ",0
00000008: 72 20 73 71 ; 
0000000C: 75 61 72 65 ; 
00000010: 20 74 6F 20 ; 
00000014: 72 65 76 65 ; 
00000018: 61 6C 3A 20 ; 
0000001C: 00          ; 
0000001D: 59 6F 75 20 ; tmesg    DEFB "You entered the index ",0
00000021: 65 6E 74 65 ; 
00000025: 72 65 64 20 ; 
00000029: 74 68 65 20 ; 
0000002D: 69 6E 64 65 ; 
00000031: 78 20 00    ; 
00000034:             ; 
00000034:             ;     ALIGN
00000034:             ; test_BoardSquareInput
00000034: E24F0038    ;         ADR R0, tprompt
00000038: EB000007    ;         BL boardSquareInput
0000003C:             ; 
0000003C: E1A01000    ;         MOV R1, R0
00000040: E24F002B    ;         ADR R0, tmesg
00000044: EF000003    ;         SWI 3
00000048: E1A00001    ;         MOV R0,R1
0000004C: EF000004    ;         SWI 4
00000050: E3A0000A    ;         MOV R0,#10
00000054: EF000000    ;         SWI 0
00000058: EF000002    ;         SWI 2
0000005C:             ; 
0000005C:             ; 
0000005C:             ; ; boardSquareInput -- read board position from keyboard
0000005C:             ; ; Input:  R0 ---> prompt string address
0000005C:             ; ; Ouptut: R0 <--- index
0000005C:             ; 
0000005C:             ; 
0000005C:             ; 
0000005C:             ; boardSquareInput
0000005C:             ; 
0000005C:             ; 
0000005C: E3A0D801    ;        MOV R13, #0x10000 ; stack base address
00000060: E92D0010    ;        STMFD R13!, {R4}
00000064: E92D0020    ;        STMFD R13!, {R5}
00000068: E92D0040    ;        STMFD R13!, {R6}
0000006C: E3A04000    ;        MOV R4 ,#0
00000070:             ;     
00000070:             ; 
00000070:             ; printPrompt
00000070:             ; 
00000070: EF000003    ;        SWI 3
00000074: E1A03000    ;        MOV R3, R0
00000078: EA000003    ;        B takeInput
0000007C:             ; 
0000007C:             ; printPromptAgain
0000007C: E3A04000    ;        MOV R4 ,#0
00000080: E1A00003    ;        MOV R0, R3
00000084: EF000003    ;        SWI 3
00000088: E1A03000    ;        MOV R3, R0
0000008C:             ; 
0000008C:             ; takeInput 
0000008C:             ; 
0000008C: E2844001    ;        ADD R4, R4, #1 ;This is used as a loop counter so i can avoid testing the pushed R4 from
                      ;  the start of the prog as valid data
00000090: E3A00000    ;        MOV R0, #0
00000094:             ;      
00000094:             ; 
00000094: EF000001    ;        SWI 1
00000098: E1A02000    ;        MOV R2, R0
0000009C: E92D0001    ;        STMFD R13!, {R0}
000000A0:             ; 
000000A0: EF000000    ;        SWI 0
000000A4: E350000A    ;        CMP R0, #10
000000A8: 1AFFFFF7    ;        BNE takeInput  
000000AC:             ; 
000000AC:             ; process ;10/ENTER seems to be included here so I need to avoid processing that since it isnt ev
                      ; en a valid char to begin with
000000AC:             ; 
000000AC: E2444001    ;         SUB R4, R4, #1
000000B0:             ;         
000000B0: E8BD0001    ;         LDMFD R13!, {R0}
000000B4:             ; 
000000B4: E350000A    ;         CMP R0, #10                     ;; need to work a way how to calculate a cell number to
                      ;  return given the numbers input by the user
000000B8: 0A000009    ;         BEQ IGN_CHAR
000000BC:             ; 
000000BC: E350002C    ;         CMP R0, #','
000000C0: 0A000007    ;         BEQ IGN_CHAR
000000C4:             ; 
000000C4: E3500038    ;         CMP R0, #'8'
000000C8: CAFFFFEB    ;         BGT printPromptAgain
000000CC:             ; 
000000CC: E3500031    ;         CMP R0, #'1'
000000D0: BAFFFFE9    ;         BLT printPromptAgain
000000D4:             ; 
000000D4: E3540000    ;         CMP R4, #0
000000D8: 01A05000    ;         MOVEQ R5, R0
000000DC:             ; 
000000DC: E3540002    ;         CMP R4, #2
000000E0: 01A06000    ;         MOVEQ R6, R0
000000E4:             ; 
000000E4:             ; IGN_CHAR
000000E4:             ; 
000000E4: E3540000    ;         CMP R4, #0
000000E8: CAFFFFEF    ;         BGT process
000000EC:             ; 
000000EC:             ; 
000000EC:             ; endProcess
000000EC:             ; 
000000EC:             ;        ;ADR R0, wmesg
000000EC:             ;        ;SWI 3
000000EC:             ; 
000000EC:             ; 
000000EC: E2455030    ;        SUB R5,R5, #48   ;Convert ascii chars to their actual decimal representative 
000000F0: E2466030    ;        SUB R6,R6, #48
000000F4:             ; 
000000F4:             ;                         ;My own formula I made (8xC - (8-R))
000000F4: E3A00008    ;        MOV R0, #8
000000F8: E0010095    ;        MUL R1, R5, R0
000000FC: E1A02000    ;        MOV R2, R0
00000100: E0422006    ;        SUB R2, R2, R6
00000104: E0411002    ;        SUB R1, R1, R2
00000108: E2411001    ;        SUB R1, R1, #1 ; this was needed for some reason
0000010C:             ; 
0000010C:             ;        ;ADR R0, dmesg
0000010C:             ;        ;SWI 3
0000010C:             ; 
0000010C:             ; 
0000010C: E1A00001    ;        MOV R0, R1
00000110:             ; 
00000110: E8BD0010    ;        LDMFD R13!,{R4}
00000114: E8BD0020    ;        LDMFD R13!,{R5}
00000118: E8BD0040    ;        LDMFD R13!,{R6}
0000011C:             ; 
0000011C:             ;       
0000011C: E12FFF1E    ;        BX LR
00000120:             ; 
00000120:             ; 
00000120:             ; 
00000120:             ; ; Test subroutines to run when a certain test is met within code
00000120:             ; TEST
00000120:             ; 
00000120: E3A0004D    ;         MOV R0, #77
00000124: EF000000    ;         SWI 0
00000128: EF000000    ;         SWI 0
0000012C: EF000000    ;         SWI 0
00000130: EF000000    ;         SWI 0
00000134: EF000000    ;         SWI 0
00000138: EF000000    ;         SWI 0
0000013C: EF000000    ;         SWI 0
00000140:             ; 
00000140: E8BD0010    ;         LDMFD R13!,{R4}
00000144: E8BD0020    ;         LDMFD R13!,{R5}
00000148: E8BD0040    ;         LDMFD R13!,{R6}
0000014C: EAFFFFCA    ;         B printPromptAgain
00000150:             ; 
00000150:             ; OUTBOUNDTESTA
00000150:             ; 
00000150: E3A00058    ;         MOV R0, #88
00000154: EF000000    ;         SWI 0
00000158: EF000000    ;         SWI 0
0000015C: EF000000    ;         SWI 0
00000160: EF000000    ;         SWI 0
00000164: EF000000    ;         SWI 0
00000168: EF000000    ;         SWI 0
0000016C: EF000000    ;         SWI 0
00000170:             ; 
00000170: E8BD0010    ;         LDMFD R13!,{R4}
00000174: E8BD0020    ;        LDMFD R13!,{R5}
00000178: E8BD0040    ;        LDMFD R13!,{R6}
0000017C: EF000002    ;         SWI 2
00000180:             ; 
00000180:             ; OUTBOUNDTESTB
00000180:             ; 
00000180: E3A00063    ;         MOV R0, #99
00000184: EF000000    ;         SWI 0
00000188: EF000000    ;         SWI 0
0000018C: EF000000    ;         SWI 0
00000190: EF000000    ;         SWI 0
00000194: EF000000    ;         SWI 0
00000198: EF000000    ;         SWI 0
0000019C: EF000000    ;         SWI 0
000001A0:             ; 
000001A0:             ; 
000001A0: E3A0000A    ;         MOV R0,#10
000001A4: EF000000    ;         SWI 0 
000001A8: EF000000    ;         SWI 0
000001AC:             ; 
000001AC: E3A00039    ;         MOV R0, #'9'
000001B0: EF000004    ;         SWI 4
000001B4:             ; 
000001B4:             ; 
000001B4: E3A0000A    ;         MOV R0,#10
000001B8: EF000000    ;         SWI 0 
000001BC: EF000000    ;         SWI 0
000001C0:             ; 
000001C0: E3A00030    ;         MOV R0, #'0'
000001C4: EF000004    ;         SWI 4
000001C8:             ; 
000001C8: E8BD0010    ;         LDMFD R13!,{R4}
000001CC: E8BD0020    ;        LDMFD R13!,{R5}
000001D0: E8BD0040    ;        LDMFD R13!,{R6}
000001D4: EF000002    ;         SWI 2
000001D8:             ; 
000001D8:             ; 

Symbol Table: Labels
: tprompt                           00000004  Local -- ARM
: tmesg                             0000001D  Local -- ARM
: test_BoardSquareInput             00000034  Local -- ARM
: boardSquareInput                  0000005C  Local -- ARM
: printPrompt                       00000070  Local -- ARM
: printPromptAgain                  0000007C  Local -- ARM
: takeInput                         0000008C  Local -- ARM
: process                           000000AC  Local -- ARM
: IGN_CHAR                          000000E4  Local -- ARM
: endProcess                        000000EC  Local -- ARM
: TEST                              00000120  Local -- ARM
: OUTBOUNDTESTA                     00000150  Local -- ARM
: OUTBOUNDTESTB                     00000180  Local -- ARM
