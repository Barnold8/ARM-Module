KMD
00000000: EA00007F    ;         B test_generateBoard
00000004:             ; 
00000004:             ; 
00000004:             ; ; Our board 
00000004:             ; ; 0, represents an empty space
00000004:             ; ; 1-8 represents the number of bombs around us
00000004:             ; ; 66 represents there is a bomb at this location
00000004:             ; ; No more than 8 bombs
00000004:             ; testGenboard   
00000004: 00000001    ;         DEFW  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
00000008: 00000002    ; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0000000C: 00000003    ;  0, 0, 0, 0, 0, 0, 0
00000010: 00000004    ; 
00000014: 00000005    ; 
00000018: 00000006    ; 
0000001C: 00000007    ; 
00000020: 00000008    ; 
00000024: 00000009    ; 
00000028: 0000000A    ; 
0000002C: 0000000B    ; 
00000030: 0000000C    ; 
00000034: 0000000D    ; 
00000038: 0000000E    ; 
0000003C: 0000000F    ; 
00000040: 00000000    ; 
00000044: 00000000    ; 
00000048: 00000000    ; 
0000004C: 00000000    ; 
00000050: 00000000    ; 
00000054: 00000000    ; 
00000058: 00000000    ; 
0000005C: 00000000    ; 
00000060: 00000000    ; 
00000064: 00000000    ; 
00000068: 00000000    ; 
0000006C: 00000000    ; 
00000070: 00000000    ; 
00000074: 00000000    ; 
00000078: 00000000    ; 
0000007C: 00000000    ; 
00000080: 00000000    ; 
00000084: 00000000    ; 
00000088: 00000000    ; 
0000008C: 00000000    ; 
00000090: 00000000    ; 
00000094: 00000000    ; 
00000098: 00000000    ; 
0000009C: 00000000    ; 
000000A0: 00000000    ; 
000000A4: 00000000    ; 
000000A8: 00000000    ; 
000000AC: 00000000    ; 
000000B0: 00000000    ; 
000000B4: 00000000    ; 
000000B8: 00000000    ; 
000000BC: 00000000    ; 
000000C0: 00000000    ; 
000000C4: 00000000    ; 
000000C8: 00000000    ; 
000000CC: 00000000    ; 
000000D0: 00000000    ; 
000000D4: 00000000    ; 
000000D8: 00000000    ; 
000000DC: 00000000    ; 
000000E0: 00000000    ; 
000000E4: 00000000    ; 
000000E8: 00000000    ; 
000000EC: 00000000    ; 
000000F0: 00000000    ; 
000000F4: 00000000    ; 
000000F8: 00000000    ; 
000000FC: 00000000    ; 
00000100: 00000000    ; 
00000104:             ; tgbBoardMask
00000104: 00000000    ;         DEFW  0,0,0,0,0, 0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0, 0,0,0,0, 0, 0,0,0,0,0,0,0,0,0,0, 0, 0
00000108: 00000000    ; ,0,0,0,0, 0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0, 0,0,0,0, 0, 0,0,0
0000010C: 00000000    ; 
00000110: 00000000    ; 
00000114: 00000000    ; 
00000118: 00000000    ; 
0000011C: 00000000    ; 
00000120: 00000000    ; 
00000124: 00000000    ; 
00000128: 00000000    ; 
0000012C: 00000000    ; 
00000130: 00000000    ; 
00000134: 00000000    ; 
00000138: 00000000    ; 
0000013C: 00000000    ; 
00000140: 00000000    ; 
00000144: 00000000    ; 
00000148: 00000000    ; 
0000014C: 00000000    ; 
00000150: 00000000    ; 
00000154: 00000000    ; 
00000158: 00000000    ; 
0000015C: 00000000    ; 
00000160: 00000000    ; 
00000164: 00000000    ; 
00000168: 00000000    ; 
0000016C: 00000000    ; 
00000170: 00000000    ; 
00000174: 00000000    ; 
00000178: 00000000    ; 
0000017C: 00000000    ; 
00000180: 00000000    ; 
00000184: 00000000    ; 
00000188: 00000000    ; 
0000018C: 00000000    ; 
00000190: 00000000    ; 
00000194: 00000000    ; 
00000198: 00000000    ; 
0000019C: 00000000    ; 
000001A0: 00000000    ; 
000001A4: 00000000    ; 
000001A8: 00000000    ; 
000001AC: 00000000    ; 
000001B0: 00000000    ; 
000001B4: 00000000    ; 
000001B8: 00000000    ; 
000001BC: 00000000    ; 
000001C0: 00000000    ; 
000001C4: 00000000    ; 
000001C8: 00000000    ; 
000001CC: 00000000    ; 
000001D0: 00000000    ; 
000001D4: 00000000    ; 
000001D8: 00000000    ; 
000001DC: 00000000    ; 
000001E0: 00000000    ; 
000001E4: 00000000    ; 
000001E8: 00000000    ; 
000001EC: 00000000    ; 
000001F0: 00000000    ; 
000001F4: 00000000    ; 
000001F8: 00000000    ; 
000001FC: 00000000    ; 
00000200: 00000000    ; 
00000204:             ; 
00000204:             ;         ALIGN
00000204:             ; test_generateBoard
00000204: E3A0D801    ;         MOV R13, #0x10000
00000208: E24F0F83    ;         ADR R0, testGenboard 
0000020C: EB000003    ;         BL generateBoard
00000210:             ; 
00000210: E24F0F85    ;         ADR R0, testGenboard 
00000214: E24F1F46    ;         ADR R1, tgbBoardMask
00000218: EB0000BD    ;         BL printMaskedBoard
0000021C:             ; 
0000021C: EF000002    ;         SWI 2
00000220:             ; 
00000220:             ; 
00000220:             ; ; generateBoard
00000220:             ; ; Input R0 -- array to generate board in
00000220:             ; generateBoard
00000220:             ; ; Insert your implementation here
00000220:             ; 
00000220:             ; 
00000220:             ; PopulateMines ;Randu DOES always return a random number. Well, pseudoRandom
00000220:             ; 
00000220: E92D4000    ;         STMFD R13!, {R14} ; THIS WORKS NOW, WE CAN CONTINUE WITH THE PROGRAM
00000224: E92D0010    ;         STMFD R13!, {R4}
00000228: E92D0020    ;         STMFD R13!, {R5}
0000022C: E3A04000    ;         MOV R4, #0
00000230: E1A05000    ;         MOV R5, R0
00000234:             ; 
00000234:             ; mineLOOP
00000234:             ; 
00000234: E2844001    ;         ADD R4, R4, #1
00000238: EB000027    ;         BL randu
0000023C:             ; 
0000023C:             ;         
0000023C: E1A00440    ;         MOV R0, R0 ASR #8 ; shift R0 right by 8 bits
00000240: E200003F    ;         AND R0, R0, #0x3f ; take the modulo by 64
00000244:             ; 
00000244:             ; 
00000244: E3E01000    ;         MOV R1, #-1
00000248: E7952000    ;         LDR R2, [R5,R0]
0000024C: E1520001    ;         CMP R2, R1
00000250: 0A000000    ;         BEQ SkipMine
00000254:             ; 
00000254:             ; StoreMine
00000254:             ;        ; STR R1, [R5,R0]
00000254: EA000000    ;         B FinishMine
00000258:             ; SkipMine
00000258:             ;         
00000258: E2444001    ;         SUB R4, R4 ,#1
0000025C:             ; 
0000025C:             ; FinishMine
0000025C: E3540008    ;         CMP R4, #8
00000260: BAFFFFF3    ;         BLT mineLOOP
00000264:             ; 
00000264: E8BD0010    ;         LDMFD R13!, {R4}
00000268:             ; 
00000268:             ; 
00000268:             ; CalculateBoard
00000268:             ; 
00000268:             ;         ;VARS USED: y, x, board, p , q. Sum of vars = 5
00000268:             ;         ; VARS INDEX: R1 = y | R2 = x | R5 = board| 
00000268:             ; 
00000268: E3A01001    ;         MOV R1, #1 ; y
0000026C: E3A03000    ;         MOV R3, #0
00000270:             ; 
00000270:             ;         ;LOOP THROUGH EACH OF THE ITEMS IN THE BOARD ARRAY, IF IT IS -1, THEN CALCULATE NEIGHBO
                      ; URS
00000270:             ; 
00000270:             ; Yloop
00000270:             ;         ;for(y = 1; y < 7; y++){
00000270:             ;                 
00000270:             ;                 
00000270: E3A02001    ;                 MOV R2, #1 ; X
00000274:             ; Xloop
00000274:             ;                 ;for(x = 1; x < 7; x++){
00000274:             ;                 
00000274:             ;                         
00000274:             ;                         ;if(board[y*8+x] == -1){ // Found a mine, so increment all the cells ar
                      ; ound me
00000274:             ; 
00000274:             ;                                 ;Setting up board[y*8+x]the big nums Are the mines
00000274:             ;                                 
00000274: E92D0010    ;                                 STMFD R13!, {R4}
00000278:             ; 
00000278: E3A03004    ;                                 MOV R3, #4        ; new X (x in retrospect to byte position)   
                      ;            
0000027C: E0030293    ;                                 MUL R3, R3, R2
00000280:             ; 
00000280:             ; 
00000280: E3A04004    ;                                 MOV R4, #4        ; new Y (y in retrospect to byte position)
00000284: E0040194    ;                                 MUL R4, R4, R1
00000288:             ; 
00000288:             ;                                 ;board[y*8+x]
00000288:             ; 
00000288: E3A00008    ;                                 MOV R0, #8
0000028C:             ; 
0000028C: E0040094    ;                                 MUL R4, R4, R0
00000290: E0844003    ;                                 ADD R4, R4, R3
00000294:             ; 
00000294: E7950004    ;                                 LDR R0, [R5, R4]
00000298: EF000004    ;                                 SWI 4
0000029C: E8BD0010    ;                                 LDMFD R13!, {R4}
000002A0:             ; 
000002A0:             ;                                 ;---------------------
000002A0:             ; IncCells
000002A0:             ;                                 ;for(p = y-1; p <= y+1; p++){
000002A0:             ; 
000002A0:             ;                                         ;for(q = x-1; q <= x+1; q++){
000002A0:             ; 
000002A0:             ;                                         ; // IF not a mine, increment
000002A0:             ;                                         ;if(board[p*8+q] != -1){board[p*8+q] = board[p*8+q] +1;
                      ;  
000002A0:             ;                                         ;}}}}}}
000002A0:             ; SkipCells
000002A0:             ;  
000002A0:             ; 
000002A0: EF000004    ;                         SWI 4
000002A4: E3A00020    ;                         MOV R0, #32
000002A8: EF000000    ;                         SWI 0
000002AC: E2822001    ;                         ADD R2, R2, #1
000002B0: E3520007    ;                         CMP R2, #7
000002B4: BAFFFFEE    ;                         BLT Xloop
000002B8:             ; 
000002B8: E3A0000A    ;                 MOV R0, #10
000002BC: EF000000    ;                 SWI 0
000002C0: E2811001    ;                 ADD R1, R1, #1
000002C4: E3510007    ;                 CMP R1, #7
000002C8: BAFFFFE8    ;                 BLT Yloop
000002CC: EF000002    ;                 SWI 2
000002D0:             ; 
000002D0:             ; BCKTOMAIN
000002D0:             ; 
000002D0: E8BD0020    ;         LDMFD R13!, {R5}
000002D4: E8BD4000    ;         LDMFD R13!, {R14}
000002D8: E1A0F00E    ;         MOV PC, R14
000002DC:             ; 
000002DC:             ; 
000002DC:             ; ; DO NOT CHANGE ANYTHING AFTER THIS POINT...
000002DC:             ; ; randu -- Generates a random number
000002DC:             ; ; Input: None
000002DC:             ; ; Ouptut: R0 -> Random number
000002DC: E59F2018    ; randu   LDR R2,mult
000002E0: E3E01102    ;         MVN R1,#0x80000000
000002E4: E59F000C    ;         LDR R0,seed
000002E8: E0000092    ;         MUL R0,R2,R0
000002EC: E0000001    ;         AND R0,R0,R1
000002F0: E58F0000    ;         STR R0,seed
000002F4: E1A0F00E    ;         MOV PC, R14
000002F8:             ; 
000002F8:             ;         ALIGN
000002F8: 00C0FFEE    ; seed    DEFW    0xC0FFEE
000002FC: 00010003    ; mult    DEFW    65539
00000300:             ; 
00000300:             ;         ALIGN
00000300:             ;         include printMaskedBoard.s
00000300: EA00007F    ;             B test_printMaskedBoard
00000304:             ; ;https://developer.arm.com/documentation/dui0068/b/Writing-ARM-and-Thumb-Assembly-Language/Load
                      ; -and-store-multiple-register-instructions/Implementing-stacks-with-LDM-and-STM
00000304:             ; ; Our board 
00000304:             ; ; 0, represents an empty space
00000304:             ; ; 1-8 represents the number of bombs around us
00000304:             ; ; -1 represents there is a bomb at this location
00000304:             ; ; No more than 8 bombs
00000304:             ; pmbBoard
00000304: 00000001    ;         DEFW  1,-1, 1, 0, 0, 1,-1,-1, 1, 1, 1, 0, 0, 1, 3,-1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
00000308: FFFFFFFF    ; 0, 0, 0, 0, 0, 1,-1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1,-1, 1, 0, 0, 1, 1, 2, 2, 2, 1, 0, 0, 1,-1, 2,
0000030C: 00000001    ; -1, 1, 0, 0, 0
00000310: 00000000    ; 
00000314: 00000000    ; 
00000318: 00000001    ; 
0000031C: FFFFFFFF    ; 
00000320: FFFFFFFF    ; 
00000324: 00000001    ; 
00000328: 00000001    ; 
0000032C: 00000001    ; 
00000330: 00000000    ; 
00000334: 00000000    ; 
00000338: 00000001    ; 
0000033C: 00000003    ; 
00000340: FFFFFFFF    ; 
00000344: 00000000    ; 
00000348: 00000000    ; 
0000034C: 00000000    ; 
00000350: 00000000    ; 
00000354: 00000000    ; 
00000358: 00000000    ; 
0000035C: 00000001    ; 
00000360: 00000001    ; 
00000364: 00000001    ; 
00000368: 00000001    ; 
0000036C: 00000001    ; 
00000370: 00000000    ; 
00000374: 00000000    ; 
00000378: 00000000    ; 
0000037C: 00000000    ; 
00000380: 00000000    ; 
00000384: 00000001    ; 
00000388: FFFFFFFF    ; 
0000038C: 00000001    ; 
00000390: 00000001    ; 
00000394: 00000001    ; 
00000398: 00000001    ; 
0000039C: 00000000    ; 
000003A0: 00000000    ; 
000003A4: 00000001    ; 
000003A8: 00000001    ; 
000003AC: 00000001    ; 
000003B0: 00000001    ; 
000003B4: FFFFFFFF    ; 
000003B8: 00000001    ; 
000003BC: 00000000    ; 
000003C0: 00000000    ; 
000003C4: 00000001    ; 
000003C8: 00000001    ; 
000003CC: 00000002    ; 
000003D0: 00000002    ; 
000003D4: 00000002    ; 
000003D8: 00000001    ; 
000003DC: 00000000    ; 
000003E0: 00000000    ; 
000003E4: 00000001    ; 
000003E8: FFFFFFFF    ; 
000003EC: 00000002    ; 
000003F0: FFFFFFFF    ; 
000003F4: 00000001    ; 
000003F8: 00000000    ; 
000003FC: 00000000    ; 
00000400: 00000000    ; 
00000404:             ; pmbBoardMask
00000404: 00000000    ;         DEFW  0,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1, 0,-1,-1,-1, 0, 0,-1,-
00000408: FFFFFFFF    ; 1,-1,-1,-1,-1,-1,-1,-1, 0, 0,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1, 0,-1,-1,
0000040C: FFFFFFFF    ; -1, 0, 0,-1,-1
00000410: FFFFFFFF    ; 
00000414: FFFFFFFF    ; 
00000418: 00000000    ; 
0000041C: FFFFFFFF    ; 
00000420: 00000000    ; 
00000424: FFFFFFFF    ; 
00000428: FFFFFFFF    ; 
0000042C: FFFFFFFF    ; 
00000430: FFFFFFFF    ; 
00000434: FFFFFFFF    ; 
00000438: FFFFFFFF    ; 
0000043C: 00000000    ; 
00000440: FFFFFFFF    ; 
00000444: FFFFFFFF    ; 
00000448: FFFFFFFF    ; 
0000044C: FFFFFFFF    ; 
00000450: FFFFFFFF    ; 
00000454: 00000000    ; 
00000458: FFFFFFFF    ; 
0000045C: FFFFFFFF    ; 
00000460: FFFFFFFF    ; 
00000464: 00000000    ; 
00000468: 00000000    ; 
0000046C: FFFFFFFF    ; 
00000470: FFFFFFFF    ; 
00000474: FFFFFFFF    ; 
00000478: FFFFFFFF    ; 
0000047C: FFFFFFFF    ; 
00000480: FFFFFFFF    ; 
00000484: FFFFFFFF    ; 
00000488: FFFFFFFF    ; 
0000048C: FFFFFFFF    ; 
00000490: 00000000    ; 
00000494: 00000000    ; 
00000498: FFFFFFFF    ; 
0000049C: FFFFFFFF    ; 
000004A0: FFFFFFFF    ; 
000004A4: FFFFFFFF    ; 
000004A8: 00000000    ; 
000004AC: FFFFFFFF    ; 
000004B0: 00000000    ; 
000004B4: FFFFFFFF    ; 
000004B8: FFFFFFFF    ; 
000004BC: FFFFFFFF    ; 
000004C0: FFFFFFFF    ; 
000004C4: FFFFFFFF    ; 
000004C8: FFFFFFFF    ; 
000004CC: 00000000    ; 
000004D0: FFFFFFFF    ; 
000004D4: FFFFFFFF    ; 
000004D8: FFFFFFFF    ; 
000004DC: FFFFFFFF    ; 
000004E0: FFFFFFFF    ; 
000004E4: 00000000    ; 
000004E8: FFFFFFFF    ; 
000004EC: FFFFFFFF    ; 
000004F0: FFFFFFFF    ; 
000004F4: 00000000    ; 
000004F8: 00000000    ; 
000004FC: FFFFFFFF    ; 
00000500: FFFFFFFF    ; 
00000504:             ; 
00000504:             ;         ALIGN
00000504:             ; 
00000504:             ; ; printMaskedBoard -- print the board with only the squares visible when boardMask contains zer
                      ; o
00000504:             ; ; Input: R0 <-- Address of board
00000504:             ; ;        R1 <-- Address of board Mask
00000504:             ; 
00000504:             ; 
00000504:             ; test_printMaskedBoard
00000504: E24F0F82    ;         ADR R0, pmbBoard 
00000508: E24F1F43    ;         ADR R1, pmbBoardMask
0000050C: EB000000    ;         BL printMaskedBoard
00000510: EF000002    ;         SWI 2
00000514:             ; 
00000514:             ; 
00000514:             ; ; printBoard -- print the board 
00000514:             ; ; Input: R0 <-- Address of board
00000514:             ; printMaskedBoard   
00000514:             ; ; Insert your implementation here
00000514:             ; 
00000514: E3A0D801    ; MOV R13, #0x10000 ; stack base address
00000518:             ; 
00000518: E92D0010    ; STMFD R13!, {R4}
0000051C: E92D0020    ; STMFD R13!, {R5}
00000520:             ; 
00000520: E1A04000    ; MOV R4, R0
00000524: E1A05001    ; MOV R5, R1
00000528:             ; 
00000528: E3A00020    ; MOV R0, #32
0000052C:             ; 
0000052C: EF000000    ; SWI 0
00000530: EF000000    ; SWI 0
00000534: EF000000    ; SWI 0
00000538: E3A03000    ; MOV R3, #0
0000053C:             ; 
0000053C: E3A01001    ; MOV R1, #1
00000540:             ; 
00000540:             ; topRow
00000540:             ; 
00000540: E3A00020    ;         MOV R0, #32
00000544: EF000000    ;         SWI 0
00000548: EF000000    ;         SWI 0
0000054C:             ; 
0000054C: E1A00001    ;         MOV R0, R1
00000550: EF000004    ;         SWI 4
00000554:             ;         
00000554: E3A00020    ;         MOV R0, #32
00000558: EF000000    ;         SWI 0
0000055C: EF000000    ;         SWI 0
00000560:             ; 
00000560: E2811001    ;         ADD R1, R1, #1
00000564:             ; 
00000564: E3510009    ;         CMP R1,#9
00000568: 1AFFFFF4    ;         BNE topRow
0000056C: E3A01001    ;         MOV R1, #1 ; reset R0 after its use
00000570:             ; 
00000570:             ; RowAdd
00000570:             ;       
00000570: E3A0000A    ;         MOV R0, #10
00000574: EF000000    ;         SWI 0
00000578: EF000000    ;         SWI 0
0000057C:             ; 
0000057C: E1A00001    ;         MOV R0, R1
00000580: EF000004    ;         SWI 4
00000584: E3A00020    ;         MOV R0, #32
00000588: EF000000    ;         SWI 0
0000058C: EF000000    ;         SWI 0  
00000590:             ; 
00000590:             ; PrintTableRow ; sub-sub routine within RowAdd | ;0 = show value | !0 = show | R2 is used for ad
                      ; dressing tables
00000590:             ; 
00000590: E3A00020    ;         MOV R0, #32
00000594: EF000000    ;         SWI 0
00000598: EF000000    ;         SWI 0
0000059C:             ; 
0000059C: E7950003    ;         LDR R0, [R5,R3] ; THIS SHOULD BE THE MASKED BOARD ARRAY
000005A0: E3500000    ;         CMP R0, #0
000005A4: 0A000002    ;         BEQ PRINTVALUE
000005A8:             ; 
000005A8:             ; 
000005A8: E3A00023    ;         MOV R0, #35
000005AC: EF000000    ;         SWI 0
000005B0: EA000008    ;         B Skip
000005B4:             ; 
000005B4:             ; 
000005B4:             ; 
000005B4:             ; 
000005B4:             ; PRINTVALUE      ; THIS NEEDS TO BE LOOKED AT 
000005B4:             ;         
000005B4:             ; 
000005B4:             ;         
000005B4: E7940003    ;         LDR R0, [R4,R3]
000005B8:             ;         
000005B8: E3500000    ;         CMP R0, #0
000005BC: 03A00020    ;         MOVEQ R0 , #32 
000005C0: 0F000000    ;         SWIEQ 0
000005C4:             ; 
000005C4: E3700001    ;         CMP R0, #-1
000005C8: 03A0004D    ;         MOVEQ R0 , #77
000005CC: 0F000000    ;         SWIEQ 0
000005D0:             ; 
000005D0: E3500020    ;         CMP R0, #32
000005D4: BF000004    ;         SWILT 4
000005D8:             ; 
000005D8:             ;   
000005D8:             ; 
000005D8:             ; 
000005D8:             ; 
000005D8:             ; Skip
000005D8:             ; 
000005D8: E3A00020    ;         MOV R0, #32
000005DC: EF000000    ;         SWI 0
000005E0: EF000000    ;         SWI 0
000005E4:             ; 
000005E4: E2833004    ;         ADD R3, R3, #4
000005E8:             ; 
000005E8: E203001F    ;         AND R0, R3, #31
000005EC: E3500000    ;         CMP R0, #0
000005F0:             ;         
000005F0: 1AFFFFE6    ;         BNE PrintTableRow
000005F4:             ; 
000005F4:             ; 
000005F4:             ; RowAdd_pt_two ; end section of row add
000005F4:             ;         
000005F4:             ; 
000005F4:             ; 
000005F4:             ;         
000005F4:             ; 
000005F4: E3510008    ;         CMP R1,#8
000005F8: E2811001    ;         ADD R1,R1,#1
000005FC: 1AFFFFDB    ;         BNE RowAdd
00000600:             ;         
00000600: E8BD0020    ;         LDMFD R13!, {R5}
00000604: E8BD0010    ;         LDMFD R13!, {R4}
00000608:             ; 
00000608: E12FFF1E    ;         BX LR
0000060C:             ; 
0000060C:             ;    
0000060C:             ; 
0000060C:             ;         ALIGN
0000060C: EF000002    ;         SWI 2
00000610:             ; 

Symbol Table: Labels
: testGenboard                      00000004  Local -- ARM
: tgbBoardMask                      00000104  Local -- ARM
: test_generateBoard                00000204  Local -- ARM
: generateBoard                     00000220  Local -- ARM
: PopulateMines                     00000220  Local -- ARM
: mineLOOP                          00000234  Local -- ARM
: StoreMine                         00000254  Local -- ARM
: SkipMine                          00000258  Local -- ARM
: FinishMine                        0000025C  Local -- ARM
: CalculateBoard                    00000268  Local -- ARM
: Yloop                             00000270  Local -- ARM
: Xloop                             00000274  Local -- ARM
: IncCells                          000002A0  Local -- ARM
: SkipCells                         000002A0  Local -- ARM
: BCKTOMAIN                         000002D0  Local -- ARM
: randu                             000002DC  Local -- ARM
: seed                              000002F8  Local -- ARM
: mult                              000002FC  Local -- ARM
: pmbBoard                          00000304  Local -- ARM
: pmbBoardMask                      00000404  Local -- ARM
: test_printMaskedBoard             00000504  Local -- ARM
: printMaskedBoard                  00000514  Local -- ARM
: topRow                            00000540  Local -- ARM
: RowAdd                            00000570  Local -- ARM
: PrintTableRow                     00000590  Local -- ARM
: PRINTVALUE                        000005B4  Local -- ARM
: Skip                              000005D8  Local -- ARM
: RowAdd_pt_two                     000005F4  Local -- ARM
